// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LabLeader
  TeamLeader
  TeamMember
}

enum ProjectState {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String
  password       String
  role           Role            @default(TeamMember)
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  leadingTeams   Team[]          @relation("TeamLeader")
  memberOfTeams  TeamMember[]
  teams          Team[]          @relation("TeamMembers")
  news           News[]
  articles       Article[]
  coAuthoredArticles Article[]   @relation("ArticleCoAuthors")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  acro        String       // Acronym for the team
  leaderId    Int
  leader      User         @relation("TeamLeader", fields: [leaderId], references: [id])
  members     TeamMember[]
  memberUsers User[]       @relation("TeamMembers")
  projects    Project[]    // Relation to projects assigned to this team
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())
  
  @@unique([teamId, userId]) // Ensures a user can only be added once to a team
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  image       String    // URL or path to the image
  category    String    @default("general")
  status      String    @default("draft")
  publishDate DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishDate DateTime
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  pdfLink     String?   // Optional PDF link
  journalLink String?   // Optional journal link
  coAuthors   User[]    @relation("ArticleCoAuthors")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String
  description String?     @db.Text
  state       ProjectState @default(PLANNING)
  image       String?     // URL or path to the project image
  teamId      Int
  team        Team        @relation(fields: [teamId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expectedEndDate DateTime?
}

